// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SyntaxError.V2.DataAccess;

namespace SyntaxError.V2.DatabaseConfig.ConsoleApp.Migrations
{
    [DbContext(typeof(SyntaxErrorContext))]
    [Migration("20190424202454_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SyntaxError.V2.Modell.ChallengeObjects.Answers", b =>
                {
                    b.Property<int>("AnswersID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<string>("DummyAnswer1");

                    b.Property<string>("DummyAnswer2");

                    b.Property<string>("DummyAnswer3");

                    b.HasKey("AnswersID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.ChallengeObjects.CrewMember", b =>
                {
                    b.Property<int>("CrewMemberID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CrewTag")
                        .IsRequired();

                    b.HasKey("CrewMemberID");

                    b.ToTable("CrewMembers");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.ChallengeObjects.OuterSourceObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("URI");

                    b.HasKey("ID");

                    b.ToTable("Objects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OuterSourceObject");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.ChallengeBase", b =>
                {
                    b.Property<int>("ChallengeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChallengeTask")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("ChallengeID");

                    b.ToTable("Challenges");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChallengeBase");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.GameProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("ProfileID");

                    b.Property<int?>("SaveGameID");

                    b.HasKey("ID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SaveGameID");

                    b.ToTable("GameProfiles");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.UsingBase", b =>
                {
                    b.Property<int>("UsingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UsingID");

                    b.ToTable("UsingProfiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UsingBase");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.UsingChallenge", b =>
                {
                    b.Property<int>("ChallengeID");

                    b.Property<int>("UsingID");

                    b.HasKey("ChallengeID", "UsingID");

                    b.HasIndex("UsingID");

                    b.ToTable("UsingProfileToChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.ChallengeObjects.Game", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.ChallengeObjects.OuterSourceObject");


                    b.ToTable("Objects");

                    b.HasDiscriminator().HasValue("Game");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.ChallengeObjects.Image", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.ChallengeObjects.OuterSourceObject");


                    b.ToTable("Objects");

                    b.HasDiscriminator().HasValue("Image");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.ChallengeObjects.Music", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.ChallengeObjects.OuterSourceObject");


                    b.ToTable("Objects");

                    b.HasDiscriminator().HasValue("Music");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.GameChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.ChallengeBase");

                    b.Property<int?>("GameID");

                    b.HasIndex("GameID");

                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("GameChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.ImageChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.ChallengeBase");

                    b.Property<int?>("ImageID");

                    b.HasIndex("ImageID");

                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("ImageChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.MusicChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.ChallengeBase");

                    b.Property<int?>("SongID");

                    b.HasIndex("SongID");

                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("MusicChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.QuestionChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.ChallengeBase");

                    b.Property<int?>("AnswersID");

                    b.HasIndex("AnswersID");

                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("QuestionChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.Profile", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Utility.UsingBase");


                    b.ToTable("UsingProfiles");

                    b.HasDiscriminator().HasValue("Profile");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.SaveGame", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Utility.UsingBase");


                    b.ToTable("UsingProfiles");

                    b.HasDiscriminator().HasValue("SaveGame");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.AudienceChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.GameChallenge");


                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("AuddienceChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.CrewChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.GameChallenge");

                    b.Property<int?>("CrewMemberID");

                    b.HasIndex("CrewMemberID");

                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("CrewChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.SologameChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.GameChallenge");


                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("SologameChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.ScreenshotChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.ImageChallenge");


                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("ScreenshotChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.SilhouetteChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.ImageChallenge");


                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("SilhouetteChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.MultipleChoiceChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.QuestionChallenge");


                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("MultipleChoiceChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.QuizChallenge", b =>
                {
                    b.HasBaseType("SyntaxError.V2.Modell.Challenges.QuestionChallenge");


                    b.ToTable("Challenges");

                    b.HasDiscriminator().HasValue("QuizChallenge");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.GameProfile", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.Utility.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID");

                    b.HasOne("SyntaxError.V2.Modell.Utility.SaveGame", "SaveGame")
                        .WithMany()
                        .HasForeignKey("SaveGameID");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Utility.UsingChallenge", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.Challenges.ChallengeBase", "Challenge")
                        .WithMany("UsedIn")
                        .HasForeignKey("ChallengeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SyntaxError.V2.Modell.Utility.UsingBase", "UsingPane")
                        .WithMany("Challenges")
                        .HasForeignKey("UsingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.GameChallenge", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.ChallengeObjects.Game", "Game")
                        .WithMany("Challenges")
                        .HasForeignKey("GameID");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.ImageChallenge", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.ChallengeObjects.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.MusicChallenge", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.ChallengeObjects.Music", "Song")
                        .WithMany()
                        .HasForeignKey("SongID");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.QuestionChallenge", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.ChallengeObjects.Answers", "Answers")
                        .WithMany()
                        .HasForeignKey("AnswersID");
                });

            modelBuilder.Entity("SyntaxError.V2.Modell.Challenges.CrewChallenge", b =>
                {
                    b.HasOne("SyntaxError.V2.Modell.ChallengeObjects.CrewMember", "CrewMember")
                        .WithMany()
                        .HasForeignKey("CrewMemberID");
                });
#pragma warning restore 612, 618
        }
    }
}
